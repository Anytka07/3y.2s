Шифрування:

Генерація ключів (generate_keys):

Починаємо з ключа, який має 10 бітів.
Спочатку застосовується початкова перестановка ключа, де біти ключа перегруповуються відповідно до порядку, визначеного 
списком [2, 4, 1, 6, 3, 9, 0, 8, 7, 5].
Після цього ключ розділяється на дві половини: ліву та праву, кожна з них має по 5 бітів.
Застосовуємо циклічний зсув вліво для кожної половини, що означає, що кожен біт зсувається на одну позицію вліво, а 
перший біт стає останнім.
Об'єднуємо ліву та праву половини, отримуючи комбінований ключ.
Потім застосовується фінальна перестановка P8, де вибирається вісім бітів з комбінованого ключа відповідно до порядку, 
визначеного списком [5, 2, 6, 3, 7, 4, 9, 8].
Після цього отриманий раундовий ключ додається до списку ключів
====================================================================================
Буква "k" перетворюється в ASCII-код, який в двійковому форматі дорівнює 01101011.
Цей двійковий код 01101011 проходить через першу перестановку (initial_permutation), яка має вигляд [1, 5, 2, 0, 3, 7, 4, 6].
 Отже, новий порядок бітів буде 11010110.
Після цього розбиваємо ці біти на дві частини: ліву половину [1101] та праву половину [0110].
Тепер починається процес раундів. У нашому випадку є два раунди.
Раунд 1:
Права половина (0110) проходить через функцію раунду round_function, де виконується розширена перестановка, потім
виконується операція XOR з раундовим ключем, після чого значення проходить через S-Box підстановку та кінцеву перестановку P4. 
Отримуємо результат раунду.

Права половина бітів (проте, у вас є 4 біти, а не 8, тому буде 0110) розширюється до 8 бітів за допомогою заданої 
перестановки. Це означає, що кожен біт буде використовуватися неодноразово, але він може з'явитися на різних позиціях
 в результуючій послідовності.
Наприклад, якщо права половина має значення 0110, після розширеної перестановки вона може стати, скажімо, 00110100
Після чого ліва половина (1101) і результат раунду зазнають операції XOR, та права половина залишається без змін.

S-Box підстановка:
Результат операції XOR проходить через S-Box, який є таблицею заміщення.
Для S-DES у нас є дві S-Box таблиці, і відповідно до значень введених бітів (в даному випадку 4 біти) вибирається 
відповідний рядок і стовпець у відповідній S-Box таблиці
Раунд 2:
Ті ж самі операції виконуються для другого раунду, але ключ змінюється (використовується інший раундовий ключ).
На виході останнього раунду отримуємо зашифровану ліву та праву половини, які потім об'єднуються та проходять 
через кінцеву перестановку final_permutation.
Отримуємо зашифрований текст.
Розшифрування:

Зашифрований текст проходить через обернену послідовність операцій: замість зашифрованої правої половини застосовується функція розшифрування, ключі використовуються в зворотньому порядку.
Процес розшифрування відбувається з останнього раунду до першого.
Після розшифрування отримуємо оригінальний текст.